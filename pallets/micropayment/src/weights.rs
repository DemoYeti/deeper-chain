
//! Autogenerated weights for `pallet_micropayment`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `yubo-X400`, CPU: `AMD Ryzen 7 PRO 4750G with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/debug/deeper-chain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_micropayment
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/micropayment/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_micropayment`.
pub trait WeightInfo {
	fn open_channel() -> Weight;
	fn close_channel() -> Weight;
	fn close_expired_channels() -> Weight;
	fn add_balance() -> Weight;
	fn claim_payment() -> Weight;
}

/// Weights for `pallet_micropayment` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Micropayment::Channel` (r:1 w:1)
	/// Proof: `Micropayment::Channel` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::Nonce` (r:1 w:0)
	/// Proof: `Micropayment::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Micropayment::TotalMicropaymentChannelBalance` (r:1 w:1)
	/// Proof: `Micropayment::TotalMicropaymentChannelBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn open_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `263`
		//  Estimated: `3728`
		// Minimum execution time: 714_554_000 picoseconds.
		Weight::from_parts(724_713_000, 3728)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Micropayment::Channel` (r:1 w:1)
	/// Proof: `Micropayment::Channel` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::TotalMicropaymentChannelBalance` (r:1 w:1)
	/// Proof: `Micropayment::TotalMicropaymentChannelBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Micropayment::Nonce` (r:1 w:1)
	/// Proof: `Micropayment::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::SessionId` (r:0 w:1)
	/// Proof: `Micropayment::SessionId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `622`
		//  Estimated: `6196`
		// Minimum execution time: 1_319_969_000 picoseconds.
		Weight::from_parts(1_343_381_000, 6196)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Micropayment::Channel` (r:2 w:1)
	/// Proof: `Micropayment::Channel` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::TotalMicropaymentChannelBalance` (r:1 w:1)
	/// Proof: `Micropayment::TotalMicropaymentChannelBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Micropayment::Nonce` (r:1 w:1)
	/// Proof: `Micropayment::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::SessionId` (r:0 w:1)
	/// Proof: `Micropayment::SessionId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_expired_channels() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `730`
		//  Estimated: `6670`
		// Minimum execution time: 1_423_017_000 picoseconds.
		Weight::from_parts(1_428_569_000, 6670)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Micropayment::Channel` (r:1 w:1)
	/// Proof: `Micropayment::Channel` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Micropayment::TotalMicropaymentChannelBalance` (r:1 w:1)
	/// Proof: `Micropayment::TotalMicropaymentChannelBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `519`
		//  Estimated: `3984`
		// Minimum execution time: 705_478_000 picoseconds.
		Weight::from_parts(719_294_000, 3984)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Micropayment::Channel` (r:1 w:1)
	/// Proof: `Micropayment::Channel` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::SessionId` (r:1 w:1)
	/// Proof: `Micropayment::SessionId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::TotalMicropaymentChannelBalance` (r:1 w:1)
	/// Proof: `Micropayment::TotalMicropaymentChannelBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_payment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `570`
		//  Estimated: `6196`
		// Minimum execution time: 1_442_424_000 picoseconds.
		Weight::from_parts(1_494_610_000, 6196)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Micropayment::Channel` (r:1 w:1)
	/// Proof: `Micropayment::Channel` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::Nonce` (r:1 w:0)
	/// Proof: `Micropayment::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Micropayment::TotalMicropaymentChannelBalance` (r:1 w:1)
	/// Proof: `Micropayment::TotalMicropaymentChannelBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn open_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `263`
		//  Estimated: `3728`
		// Minimum execution time: 714_554_000 picoseconds.
		Weight::from_parts(724_713_000, 3728)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Micropayment::Channel` (r:1 w:1)
	/// Proof: `Micropayment::Channel` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::TotalMicropaymentChannelBalance` (r:1 w:1)
	/// Proof: `Micropayment::TotalMicropaymentChannelBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Micropayment::Nonce` (r:1 w:1)
	/// Proof: `Micropayment::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::SessionId` (r:0 w:1)
	/// Proof: `Micropayment::SessionId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `622`
		//  Estimated: `6196`
		// Minimum execution time: 1_319_969_000 picoseconds.
		Weight::from_parts(1_343_381_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Micropayment::Channel` (r:2 w:1)
	/// Proof: `Micropayment::Channel` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::TotalMicropaymentChannelBalance` (r:1 w:1)
	/// Proof: `Micropayment::TotalMicropaymentChannelBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Micropayment::Nonce` (r:1 w:1)
	/// Proof: `Micropayment::Nonce` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::SessionId` (r:0 w:1)
	/// Proof: `Micropayment::SessionId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_expired_channels() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `730`
		//  Estimated: `6670`
		// Minimum execution time: 1_423_017_000 picoseconds.
		Weight::from_parts(1_428_569_000, 6670)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Micropayment::Channel` (r:1 w:1)
	/// Proof: `Micropayment::Channel` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Micropayment::TotalMicropaymentChannelBalance` (r:1 w:1)
	/// Proof: `Micropayment::TotalMicropaymentChannelBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `519`
		//  Estimated: `3984`
		// Minimum execution time: 705_478_000 picoseconds.
		Weight::from_parts(719_294_000, 3984)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Micropayment::Channel` (r:1 w:1)
	/// Proof: `Micropayment::Channel` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::SessionId` (r:1 w:1)
	/// Proof: `Micropayment::SessionId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Micropayment::TotalMicropaymentChannelBalance` (r:1 w:1)
	/// Proof: `Micropayment::TotalMicropaymentChannelBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_payment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `570`
		//  Estimated: `6196`
		// Minimum execution time: 1_442_424_000 picoseconds.
		Weight::from_parts(1_494_610_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
}
