
//! Autogenerated weights for `pallet_user_privileges`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `yubo-X400`, CPU: `AMD Ryzen 7 PRO 4750G with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/debug/deeper-chain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_user_privileges
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/user-privileges/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_user_privileges`.
pub trait WeightInfo {
	fn set_user_privilege() -> Weight;
	fn clear_user_privilege() -> Weight;
	fn set_evm_privilege() -> Weight;
	fn clear_evm_privilege() -> Weight;
}

/// Weights for `pallet_user_privileges` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:1)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn set_user_privilege() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3513`
		// Minimum execution time: 247_653_000 picoseconds.
		Weight::from_parts(251_480_000, 3513)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:0 w:1)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn clear_user_privilege() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 177_706_000 picoseconds.
		Weight::from_parts(181_283_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `UserPrivileges::EvmAddressPrivileges` (r:1 w:1)
	/// Proof: `UserPrivileges::EvmAddressPrivileges` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn set_evm_privilege() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 312_623_000 picoseconds.
		Weight::from_parts(315_408_000, 3513)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `UserPrivileges::EvmAddressPrivileges` (r:0 w:1)
	/// Proof: `UserPrivileges::EvmAddressPrivileges` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn clear_evm_privilege() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 276_407_000 picoseconds.
		Weight::from_parts(278_620_000, 3513)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:1)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn set_user_privilege() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3513`
		// Minimum execution time: 247_653_000 picoseconds.
		Weight::from_parts(251_480_000, 3513)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:0 w:1)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn clear_user_privilege() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 177_706_000 picoseconds.
		Weight::from_parts(181_283_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `UserPrivileges::EvmAddressPrivileges` (r:1 w:1)
	/// Proof: `UserPrivileges::EvmAddressPrivileges` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn set_evm_privilege() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 312_623_000 picoseconds.
		Weight::from_parts(315_408_000, 3513)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `UserPrivileges::EvmAddressPrivileges` (r:0 w:1)
	/// Proof: `UserPrivileges::EvmAddressPrivileges` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn clear_evm_privilege() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 276_407_000 picoseconds.
		Weight::from_parts(278_620_000, 3513)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
