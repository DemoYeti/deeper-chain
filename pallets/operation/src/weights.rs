
//! Autogenerated weights for `pallet_operation`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `yubo-X400`, CPU: `AMD Ryzen 7 PRO 4750G with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/debug/deeper-chain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_operation
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/operation/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_operation`.
pub trait WeightInfo {
	fn force_reserve_by_member() -> Weight;
	fn force_remove_lock() -> Weight;
	fn set_release_limit_parameter() -> Weight;
	fn unstaking_release() -> Weight;
	fn burn_for_ezc() -> Weight;
	fn bridge_deeper_to_other() -> Weight;
	fn bridge_other_to_deeper() -> Weight;
}

/// Weights for `pallet_operation` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn force_reserve_by_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `290`
		//  Estimated: `3593`
		// Minimum execution time: 547_808_000 picoseconds.
		Weight::from_parts(551_816_000, 3593)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn force_remove_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240`
		//  Estimated: `4764`
		// Minimum execution time: 648_621_000 picoseconds.
		Weight::from_parts(654_041_000, 4764)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Operation::SingleMaxLimit` (r:0 w:1)
	/// Proof: `Operation::SingleMaxLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Operation::DailyMaxLimit` (r:0 w:1)
	/// Proof: `Operation::DailyMaxLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_release_limit_parameter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 89_661_000 picoseconds.
		Weight::from_parts(91_786_000, 0)
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Operation::SingleMaxLimit` (r:1 w:0)
	/// Proof: `Operation::SingleMaxLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserStakingCredit` (r:1 w:1)
	/// Proof: `Credit::UserStakingCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCredit` (r:1 w:1)
	/// Proof: `Credit::UserCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::DefaultCampaignId` (r:1 w:0)
	/// Proof: `Credit::DefaultCampaignId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCreditHistory` (r:1 w:0)
	/// Proof: `Credit::UserCreditHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Operation::AccountsReleaseInfo` (r:0 w:1)
	/// Proof: `Operation::AccountsReleaseInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unstaking_release() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `946`
		//  Estimated: `4411`
		// Minimum execution time: 760_866_000 picoseconds.
		Weight::from_parts(766_316_000, 4411)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Credit::TotalBurnDPR` (r:1 w:1)
	/// Proof: `Credit::TotalBurnDPR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::TotalDailyBurnDPR` (r:1 w:1)
	/// Proof: `Credit::TotalDailyBurnDPR` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn burn_for_ezc() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `6196`
		// Minimum execution time: 917_285_000 picoseconds.
		Weight::from_parts(923_867_000, 6196)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Operation::BridgeFundAddreess` (r:1 w:0)
	/// Proof: `Operation::BridgeFundAddreess` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn bridge_deeper_to_other() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `525`
		//  Estimated: `6196`
		// Minimum execution time: 1_052_433_000 picoseconds.
		Weight::from_parts(1_077_010_000, 6196)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Operation::BridgeFundAddreess` (r:1 w:0)
	/// Proof: `Operation::BridgeFundAddreess` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn bridge_other_to_deeper() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `525`
		//  Estimated: `6196`
		// Minimum execution time: 1_048_436_000 picoseconds.
		Weight::from_parts(1_058_505_000, 6196)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn force_reserve_by_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `290`
		//  Estimated: `3593`
		// Minimum execution time: 547_808_000 picoseconds.
		Weight::from_parts(551_816_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn force_remove_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `240`
		//  Estimated: `4764`
		// Minimum execution time: 648_621_000 picoseconds.
		Weight::from_parts(654_041_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Operation::SingleMaxLimit` (r:0 w:1)
	/// Proof: `Operation::SingleMaxLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Operation::DailyMaxLimit` (r:0 w:1)
	/// Proof: `Operation::DailyMaxLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_release_limit_parameter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 89_661_000 picoseconds.
		Weight::from_parts(91_786_000, 0)
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Operation::SingleMaxLimit` (r:1 w:0)
	/// Proof: `Operation::SingleMaxLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserStakingCredit` (r:1 w:1)
	/// Proof: `Credit::UserStakingCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCredit` (r:1 w:1)
	/// Proof: `Credit::UserCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::DefaultCampaignId` (r:1 w:0)
	/// Proof: `Credit::DefaultCampaignId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCreditHistory` (r:1 w:0)
	/// Proof: `Credit::UserCreditHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Operation::AccountsReleaseInfo` (r:0 w:1)
	/// Proof: `Operation::AccountsReleaseInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unstaking_release() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `946`
		//  Estimated: `4411`
		// Minimum execution time: 760_866_000 picoseconds.
		Weight::from_parts(766_316_000, 4411)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Credit::TotalBurnDPR` (r:1 w:1)
	/// Proof: `Credit::TotalBurnDPR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::TotalDailyBurnDPR` (r:1 w:1)
	/// Proof: `Credit::TotalDailyBurnDPR` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn burn_for_ezc() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `6196`
		// Minimum execution time: 917_285_000 picoseconds.
		Weight::from_parts(923_867_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Operation::BridgeFundAddreess` (r:1 w:0)
	/// Proof: `Operation::BridgeFundAddreess` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn bridge_deeper_to_other() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `525`
		//  Estimated: `6196`
		// Minimum execution time: 1_052_433_000 picoseconds.
		Weight::from_parts(1_077_010_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Operation::BridgeFundAddreess` (r:1 w:0)
	/// Proof: `Operation::BridgeFundAddreess` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn bridge_other_to_deeper() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `525`
		//  Estimated: `6196`
		// Minimum execution time: 1_048_436_000 picoseconds.
		Weight::from_parts(1_058_505_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
