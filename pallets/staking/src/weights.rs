
//! Autogenerated weights for `pallet_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `5`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `yubo-X400`, CPU: `AMD Ryzen 7 PRO 4750G with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/debug/deeper-chain
// benchmark
// pallet
// --chain=dev
// --steps=5
// --repeat=1
// --pallet=pallet_staking
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/staking/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_staking`.
pub trait WeightInfo {
	fn bond() -> Weight;
	fn bond_extra() -> Weight;
	fn unbond() -> Weight;
	fn withdraw_unbonded_update(s: u32, ) -> Weight;
	fn withdraw_unbonded_kill(s: u32, ) -> Weight;
	fn validate() -> Weight;
	fn staking_delegate() -> Weight;
	fn usdt_staking_delegate() -> Weight;
	fn delegate(n: u32, ) -> Weight;
	fn undelegate() -> Weight;
	fn chill() -> Weight;
	fn set_payee() -> Weight;
	fn set_controller() -> Weight;
	fn set_era_validator_reward() -> Weight;
	fn set_validator_count() -> Weight;
	fn increase_validator_count(n: u32, ) -> Weight;
	fn scale_validator_count(n: u32, ) -> Weight;
	fn force_no_eras() -> Weight;
	fn force_new_era() -> Weight;
	fn force_new_era_always() -> Weight;
	fn set_invulnerables(v: u32, ) -> Weight;
	fn set_validator_whitelist(v: u32, ) -> Weight;
	fn force_unstake(s: u32, ) -> Weight;
	fn increase_mining_reward(r: u32, ) -> Weight;
	fn cancel_deferred_slash(s: u32, ) -> Weight;
	fn rebond(l: u32, ) -> Weight;
	fn set_history_depth(e: u32, ) -> Weight;
	fn reap_stash(s: u32, ) -> Weight;
	fn new_era(v: u32, d: u32, ) -> Weight;
	fn npow_mint() -> Weight;
}

/// Weights for `pallet_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ExistentialDeposit` (r:1 w:0)
	/// Proof: `Staking::ExistentialDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::HistoryDepth` (r:1 w:0)
	/// Proof: `Staking::HistoryDepth` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1070`
		//  Estimated: `4764`
		// Minimum execution time: 1_132_648_000 picoseconds.
		Weight::from_parts(1_132_648_000, 4764)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn bond_extra() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1088`
		//  Estimated: `4764`
		// Minimum execution time: 942_826_000 picoseconds.
		Weight::from_parts(942_826_000, 4764)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ExistentialDeposit` (r:1 w:0)
	/// Proof: `Staking::ExistentialDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn unbond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `985`
		//  Estimated: `4764`
		// Minimum execution time: 763_064_000 picoseconds.
		Weight::from_parts(763_064_000, 4764)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn withdraw_unbonded_update(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `943`
		//  Estimated: `4764`
		// Minimum execution time: 843_908_000 picoseconds.
		Weight::from_parts(882_248_600, 4764)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SlashingSpans` (r:1 w:1)
	/// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:0 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SpanSlash` (r:0 w:100)
	/// Proof: `Staking::SpanSlash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[0, 100]`.
	fn withdraw_unbonded_kill(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1199 + s * (4 ±0)`
		//  Estimated: `4764 + s * (5 ±0)`
		// Minimum execution time: 1_162_235_000 picoseconds.
		Weight::from_parts(1_174_624_400, 4764)
			// Standard Error: 151_357
			.saturating_add(Weight::from_parts(25_760_760, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(s.into()))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:0 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn validate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `692`
		//  Estimated: `4157`
		// Minimum execution time: 272_379_000 picoseconds.
		Weight::from_parts(272_379_000, 4157)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CreditAccumulation::AtmosAccountid` (r:1 w:0)
	/// Proof: `CreditAccumulation::AtmosAccountid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CreditAccumulation::TmpAtmosAccountid` (r:1 w:0)
	/// Proof: `CreditAccumulation::TmpAtmosAccountid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::DefaultCampaignId` (r:1 w:0)
	/// Proof: `Credit::DefaultCampaignId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCredit` (r:1 w:1)
	/// Proof: `Credit::UserCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::GenesisCreditBalances` (r:1 w:0)
	/// Proof: `Credit::GenesisCreditBalances` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Staking::DelegatorBalances` (r:1 w:1)
	/// Proof: `Staking::DelegatorBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCreditHistory` (r:1 w:1)
	/// Proof: `Credit::UserCreditHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserStakingCredit` (r:1 w:1)
	/// Proof: `Credit::UserStakingCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:3 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Delegators` (r:1 w:1)
	/// Proof: `Staking::Delegators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ActiveDelegatorCount` (r:1 w:1)
	/// Proof: `Staking::ActiveDelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::DelegatorCount` (r:1 w:1)
	/// Proof: `Staking::DelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CandidateValidators` (r:1 w:1)
	/// Proof: `Staking::CandidateValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn staking_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1940`
		//  Estimated: `10355`
		// Minimum execution time: 2_656_141_000 picoseconds.
		Weight::from_parts(2_656_141_000, 10355)
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Credit::DefaultUsdtCampaignId` (r:1 w:0)
	/// Proof: `Credit::DefaultUsdtCampaignId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCredit` (r:1 w:1)
	/// Proof: `Credit::UserCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UsdtCreditBalances` (r:1 w:0)
	/// Proof: `Credit::UsdtCreditBalances` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::DefaultCampaignId` (r:1 w:0)
	/// Proof: `Credit::DefaultCampaignId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserStakingCredit` (r:1 w:1)
	/// Proof: `Credit::UserStakingCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserStakingBalance` (r:1 w:1)
	/// Proof: `Credit::UserStakingBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:3 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Delegators` (r:1 w:1)
	/// Proof: `Staking::Delegators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ActiveDelegatorCount` (r:1 w:1)
	/// Proof: `Staking::ActiveDelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::DelegatorCount` (r:1 w:1)
	/// Proof: `Staking::DelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CandidateValidators` (r:1 w:1)
	/// Proof: `Staking::CandidateValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCreditHistory` (r:0 w:1)
	/// Proof: `Credit::UserCreditHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn usdt_staking_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1770`
		//  Estimated: `10185`
		// Minimum execution time: 1_814_898_000 picoseconds.
		Weight::from_parts(1_814_898_000, 10185)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:2 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCredit` (r:1 w:0)
	/// Proof: `Credit::UserCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Delegators` (r:1 w:1)
	/// Proof: `Staking::Delegators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ActiveDelegatorCount` (r:1 w:1)
	/// Proof: `Staking::ActiveDelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::DelegatorCount` (r:1 w:1)
	/// Proof: `Staking::DelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CandidateValidators` (r:1 w:1)
	/// Proof: `Staking::CandidateValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCreditHistory` (r:0 w:1)
	/// Proof: `Credit::UserCreditHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 1000000]`.
	fn delegate(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1292`
		//  Estimated: `7225`
		// Minimum execution time: 822_236_000 picoseconds.
		Weight::from_parts(940_420_270, 7225)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Staking::Delegators` (r:1 w:1)
	/// Proof: `Staking::Delegators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CandidateValidators` (r:1 w:1)
	/// Proof: `Staking::CandidateValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::DelegatorCount` (r:1 w:1)
	/// Proof: `Staking::DelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ActiveDelegatorCount` (r:1 w:1)
	/// Proof: `Staking::ActiveDelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn undelegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `886`
		//  Estimated: `4351`
		// Minimum execution time: 645_530_000 picoseconds.
		Weight::from_parts(645_530_000, 4351)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:0 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn chill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `692`
		//  Estimated: `4157`
		// Minimum execution time: 271_778_000 picoseconds.
		Weight::from_parts(271_778_000, 4157)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_payee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `692`
		//  Estimated: `4157`
		// Minimum execution time: 242_361_000 picoseconds.
		Weight::from_parts(242_361_000, 4157)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:2 w:2)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_controller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `814`
		//  Estimated: `6754`
		// Minimum execution time: 407_306_000 picoseconds.
		Weight::from_parts(407_306_000, 6754)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Staking::EraValidatorReward` (r:0 w:1)
	/// Proof: `Staking::EraValidatorReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_era_validator_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 113_115_000 picoseconds.
		Weight::from_parts(113_115_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ValidatorCount` (r:0 w:1)
	/// Proof: `Staking::ValidatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_validator_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 111_122_000 picoseconds.
		Weight::from_parts(111_122_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ValidatorCount` (r:1 w:1)
	/// Proof: `Staking::ValidatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 1000]`.
	fn increase_validator_count(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `483`
		//  Estimated: `1968`
		// Minimum execution time: 194_561_000 picoseconds.
		Weight::from_parts(196_385_282, 1968)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ValidatorCount` (r:1 w:1)
	/// Proof: `Staking::ValidatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 100]`.
	fn scale_validator_count(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `483`
		//  Estimated: `1968`
		// Minimum execution time: 193_419_000 picoseconds.
		Weight::from_parts(194_923_665, 1968)
			// Standard Error: 30_572
			.saturating_add(Weight::from_parts(17_520, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ForceEra` (r:0 w:1)
	/// Proof: `Staking::ForceEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_no_eras() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 115_229_000 picoseconds.
		Weight::from_parts(115_229_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ForceEra` (r:0 w:1)
	/// Proof: `Staking::ForceEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_new_era() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 116_372_000 picoseconds.
		Weight::from_parts(116_372_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ForceEra` (r:0 w:1)
	/// Proof: `Staking::ForceEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_new_era_always() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 115_881_000 picoseconds.
		Weight::from_parts(115_881_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::Invulnerables` (r:0 w:1)
	/// Proof: `Staking::Invulnerables` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `v` is `[0, 1000]`.
	fn set_invulnerables(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 115_090_000 picoseconds.
		Weight::from_parts(119_281_400, 0)
			// Standard Error: 9_141
			.saturating_add(Weight::from_parts(26_000, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ValidatorWhiteList` (r:0 w:1)
	/// Proof: `Staking::ValidatorWhiteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `v` is `[0, 1000]`.
	fn set_validator_whitelist(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 211_894_000 picoseconds.
		Weight::from_parts(214_537_000, 0)
			// Standard Error: 4_541
			.saturating_add(Weight::from_parts(51_249, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SlashingSpans` (r:1 w:1)
	/// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:0 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:0 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SpanSlash` (r:0 w:100)
	/// Proof: `Staking::SpanSlash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[0, 100]`.
	fn force_unstake(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `955 + s * (4 ±0)`
		//  Estimated: `4764 + s * (5 ±0)`
		// Minimum execution time: 911_867_000 picoseconds.
		Weight::from_parts(941_343_600, 4764)
			// Standard Error: 342_574
			.saturating_add(Weight::from_parts(25_578_652, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(s.into()))
	}
	/// Storage: `Staking::RemainderMiningReward` (r:1 w:1)
	/// Proof: `Staking::RemainderMiningReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[0, 10000]`.
	fn increase_mining_reward(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `522`
		//  Estimated: `2007`
		// Minimum execution time: 293_840_000 picoseconds.
		Weight::from_parts(295_326_600, 2007)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::UnappliedSlashes` (r:1 w:1)
	/// Proof: `Staking::UnappliedSlashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[1, 1000]`.
	fn cancel_deferred_slash(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66525`
		//  Estimated: `69990`
		// Minimum execution time: 384_743_000 picoseconds.
		Weight::from_parts(877_613_063, 69990)
			// Standard Error: 680_121
			.saturating_add(Weight::from_parts(3_860_200, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 32]`.
	fn rebond(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `967 + l * (2 ±0)`
		//  Estimated: `4764 + l * (2 ±0)`
		// Minimum execution time: 616_594_000 picoseconds.
		Weight::from_parts(622_823_995, 4764)
			// Standard Error: 679_783
			.saturating_add(Weight::from_parts(394_876, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::HistoryDepth` (r:1 w:1)
	/// Proof: `Staking::HistoryDepth` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasStakers` (r:101 w:101)
	/// Proof: `Staking::ErasStakers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasValidatorPrefs` (r:100 w:100)
	/// Proof: `Staking::ErasValidatorPrefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasRewardPoints` (r:0 w:100)
	/// Proof: `Staking::ErasRewardPoints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasTotalStake` (r:0 w:100)
	/// Proof: `Staking::ErasTotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasStartSessionIndex` (r:0 w:100)
	/// Proof: `Staking::ErasStartSessionIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasValidators` (r:0 w:100)
	/// Proof: `Staking::ErasValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `e` is `[1, 100]`.
	fn set_history_depth(e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `735 + e * (120 ±0)`
		//  Estimated: `4200 + e * (2595 ±0)`
		// Minimum execution time: 520_151_000 picoseconds.
		Weight::from_parts(520_151_000, 4200)
			// Standard Error: 7_810_016
			.saturating_add(Weight::from_parts(274_706_464, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(e.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(e.into())))
			.saturating_add(Weight::from_parts(0, 2595).saturating_mul(e.into()))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SlashingSpans` (r:1 w:1)
	/// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:0 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:0 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SpanSlash` (r:0 w:100)
	/// Proof: `Staking::SpanSlash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[1, 100]`.
	fn reap_stash(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `955 + s * (4 ±0)`
		//  Estimated: `4764 + s * (4 ±0)`
		// Minimum execution time: 1_025_354_000 picoseconds.
		Weight::from_parts(1_037_011_190, 4764)
			// Standard Error: 587_748
			.saturating_add(Weight::from_parts(25_162_613, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(s.into()))
	}
	/// Storage: `Staking::CurrentEra` (r:1 w:1)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::HistoryDepth` (r:1 w:0)
	/// Proof: `Staking::HistoryDepth` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:11 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ValidatorWhiteList` (r:1 w:0)
	/// Proof: `Staking::ValidatorWhiteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CandidateValidators` (r:10 w:10)
	/// Proof: `Staking::CandidateValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::MinimumValidatorCount` (r:1 w:0)
	/// Proof: `Staking::MinimumValidatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ValidatorCount` (r:1 w:0)
	/// Proof: `Staking::ValidatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Bonded` (r:10 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:10 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasStakers` (r:0 w:10)
	/// Proof: `Staking::ErasStakers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasTotalStake` (r:0 w:1)
	/// Proof: `Staking::ErasTotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasStartSessionIndex` (r:0 w:1)
	/// Proof: `Staking::ErasStartSessionIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasValidators` (r:0 w:1)
	/// Proof: `Staking::ErasValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `d` is `[1, 1000]`.
	fn new_era(v: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `820 + d * (32 ±0) + v * (302 ±0)`
		//  Estimated: `3890 + d * (32 ±0) + v * (2786 ±15)`
		// Minimum execution time: 1_835_808_000 picoseconds.
		Weight::from_parts(98_950_880, 3890)
			// Standard Error: 18_766_948
			.saturating_add(Weight::from_parts(432_195_105, 0).saturating_mul(v.into()))
			// Standard Error: 173_248
			.saturating_add(Weight::from_parts(1_316_395, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 2786).saturating_mul(v.into()))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::NpowMintDayLimit` (r:1 w:0)
	/// Proof: `Staking::NpowMintDayLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::RemainderMiningReward` (r:1 w:1)
	/// Proof: `Staking::RemainderMiningReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::NpowDayMintedDPR` (r:1 w:1)
	/// Proof: `Staking::NpowDayMintedDPR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn npow_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `806`
		//  Estimated: `3593`
		// Minimum execution time: 915_685_000 picoseconds.
		Weight::from_parts(915_685_000, 3593)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ExistentialDeposit` (r:1 w:0)
	/// Proof: `Staking::ExistentialDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::HistoryDepth` (r:1 w:0)
	/// Proof: `Staking::HistoryDepth` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1070`
		//  Estimated: `4764`
		// Minimum execution time: 1_132_648_000 picoseconds.
		Weight::from_parts(1_132_648_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn bond_extra() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1088`
		//  Estimated: `4764`
		// Minimum execution time: 942_826_000 picoseconds.
		Weight::from_parts(942_826_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ExistentialDeposit` (r:1 w:0)
	/// Proof: `Staking::ExistentialDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn unbond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `985`
		//  Estimated: `4764`
		// Minimum execution time: 763_064_000 picoseconds.
		Weight::from_parts(763_064_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn withdraw_unbonded_update(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `943`
		//  Estimated: `4764`
		// Minimum execution time: 843_908_000 picoseconds.
		Weight::from_parts(882_248_600, 4764)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SlashingSpans` (r:1 w:1)
	/// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:0 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SpanSlash` (r:0 w:100)
	/// Proof: `Staking::SpanSlash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[0, 100]`.
	fn withdraw_unbonded_kill(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1199 + s * (4 ±0)`
		//  Estimated: `4764 + s * (5 ±0)`
		// Minimum execution time: 1_162_235_000 picoseconds.
		Weight::from_parts(1_174_624_400, 4764)
			// Standard Error: 151_357
			.saturating_add(Weight::from_parts(25_760_760, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(s.into()))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:0 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn validate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `692`
		//  Estimated: `4157`
		// Minimum execution time: 272_379_000 picoseconds.
		Weight::from_parts(272_379_000, 4157)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CreditAccumulation::AtmosAccountid` (r:1 w:0)
	/// Proof: `CreditAccumulation::AtmosAccountid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CreditAccumulation::TmpAtmosAccountid` (r:1 w:0)
	/// Proof: `CreditAccumulation::TmpAtmosAccountid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::DefaultCampaignId` (r:1 w:0)
	/// Proof: `Credit::DefaultCampaignId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCredit` (r:1 w:1)
	/// Proof: `Credit::UserCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::GenesisCreditBalances` (r:1 w:0)
	/// Proof: `Credit::GenesisCreditBalances` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Staking::DelegatorBalances` (r:1 w:1)
	/// Proof: `Staking::DelegatorBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCreditHistory` (r:1 w:1)
	/// Proof: `Credit::UserCreditHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserStakingCredit` (r:1 w:1)
	/// Proof: `Credit::UserStakingCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:3 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Delegators` (r:1 w:1)
	/// Proof: `Staking::Delegators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ActiveDelegatorCount` (r:1 w:1)
	/// Proof: `Staking::ActiveDelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::DelegatorCount` (r:1 w:1)
	/// Proof: `Staking::DelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CandidateValidators` (r:1 w:1)
	/// Proof: `Staking::CandidateValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn staking_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1940`
		//  Estimated: `10355`
		// Minimum execution time: 2_656_141_000 picoseconds.
		Weight::from_parts(2_656_141_000, 10355)
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Credit::DefaultUsdtCampaignId` (r:1 w:0)
	/// Proof: `Credit::DefaultUsdtCampaignId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCredit` (r:1 w:1)
	/// Proof: `Credit::UserCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UsdtCreditBalances` (r:1 w:0)
	/// Proof: `Credit::UsdtCreditBalances` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::DefaultCampaignId` (r:1 w:0)
	/// Proof: `Credit::DefaultCampaignId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserStakingCredit` (r:1 w:1)
	/// Proof: `Credit::UserStakingCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserStakingBalance` (r:1 w:1)
	/// Proof: `Credit::UserStakingBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:3 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Delegators` (r:1 w:1)
	/// Proof: `Staking::Delegators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ActiveDelegatorCount` (r:1 w:1)
	/// Proof: `Staking::ActiveDelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::DelegatorCount` (r:1 w:1)
	/// Proof: `Staking::DelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CandidateValidators` (r:1 w:1)
	/// Proof: `Staking::CandidateValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCreditHistory` (r:0 w:1)
	/// Proof: `Credit::UserCreditHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn usdt_staking_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1770`
		//  Estimated: `10185`
		// Minimum execution time: 1_814_898_000 picoseconds.
		Weight::from_parts(1_814_898_000, 10185)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:2 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCredit` (r:1 w:0)
	/// Proof: `Credit::UserCredit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Delegators` (r:1 w:1)
	/// Proof: `Staking::Delegators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ActiveDelegatorCount` (r:1 w:1)
	/// Proof: `Staking::ActiveDelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::DelegatorCount` (r:1 w:1)
	/// Proof: `Staking::DelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CandidateValidators` (r:1 w:1)
	/// Proof: `Staking::CandidateValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Credit::UserCreditHistory` (r:0 w:1)
	/// Proof: `Credit::UserCreditHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 1000000]`.
	fn delegate(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1292`
		//  Estimated: `7225`
		// Minimum execution time: 822_236_000 picoseconds.
		Weight::from_parts(940_420_270, 7225)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Staking::Delegators` (r:1 w:1)
	/// Proof: `Staking::Delegators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CandidateValidators` (r:1 w:1)
	/// Proof: `Staking::CandidateValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::DelegatorCount` (r:1 w:1)
	/// Proof: `Staking::DelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ActiveDelegatorCount` (r:1 w:1)
	/// Proof: `Staking::ActiveDelegatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn undelegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `886`
		//  Estimated: `4351`
		// Minimum execution time: 645_530_000 picoseconds.
		Weight::from_parts(645_530_000, 4351)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:0 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn chill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `692`
		//  Estimated: `4157`
		// Minimum execution time: 271_778_000 picoseconds.
		Weight::from_parts(271_778_000, 4157)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_payee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `692`
		//  Estimated: `4157`
		// Minimum execution time: 242_361_000 picoseconds.
		Weight::from_parts(242_361_000, 4157)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:2 w:2)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_controller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `814`
		//  Estimated: `6754`
		// Minimum execution time: 407_306_000 picoseconds.
		Weight::from_parts(407_306_000, 6754)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Staking::EraValidatorReward` (r:0 w:1)
	/// Proof: `Staking::EraValidatorReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_era_validator_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 113_115_000 picoseconds.
		Weight::from_parts(113_115_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ValidatorCount` (r:0 w:1)
	/// Proof: `Staking::ValidatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_validator_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 111_122_000 picoseconds.
		Weight::from_parts(111_122_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ValidatorCount` (r:1 w:1)
	/// Proof: `Staking::ValidatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 1000]`.
	fn increase_validator_count(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `483`
		//  Estimated: `1968`
		// Minimum execution time: 194_561_000 picoseconds.
		Weight::from_parts(196_385_282, 1968)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ValidatorCount` (r:1 w:1)
	/// Proof: `Staking::ValidatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 100]`.
	fn scale_validator_count(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `483`
		//  Estimated: `1968`
		// Minimum execution time: 193_419_000 picoseconds.
		Weight::from_parts(194_923_665, 1968)
			// Standard Error: 30_572
			.saturating_add(Weight::from_parts(17_520, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ForceEra` (r:0 w:1)
	/// Proof: `Staking::ForceEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_no_eras() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 115_229_000 picoseconds.
		Weight::from_parts(115_229_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ForceEra` (r:0 w:1)
	/// Proof: `Staking::ForceEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_new_era() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 116_372_000 picoseconds.
		Weight::from_parts(116_372_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ForceEra` (r:0 w:1)
	/// Proof: `Staking::ForceEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_new_era_always() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 115_881_000 picoseconds.
		Weight::from_parts(115_881_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::Invulnerables` (r:0 w:1)
	/// Proof: `Staking::Invulnerables` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `v` is `[0, 1000]`.
	fn set_invulnerables(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 115_090_000 picoseconds.
		Weight::from_parts(119_281_400, 0)
			// Standard Error: 9_141
			.saturating_add(Weight::from_parts(26_000, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::ValidatorWhiteList` (r:0 w:1)
	/// Proof: `Staking::ValidatorWhiteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `v` is `[0, 1000]`.
	fn set_validator_whitelist(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 211_894_000 picoseconds.
		Weight::from_parts(214_537_000, 0)
			// Standard Error: 4_541
			.saturating_add(Weight::from_parts(51_249, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SlashingSpans` (r:1 w:1)
	/// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:0 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:0 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SpanSlash` (r:0 w:100)
	/// Proof: `Staking::SpanSlash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[0, 100]`.
	fn force_unstake(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `955 + s * (4 ±0)`
		//  Estimated: `4764 + s * (5 ±0)`
		// Minimum execution time: 911_867_000 picoseconds.
		Weight::from_parts(941_343_600, 4764)
			// Standard Error: 342_574
			.saturating_add(Weight::from_parts(25_578_652, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(s.into()))
	}
	/// Storage: `Staking::RemainderMiningReward` (r:1 w:1)
	/// Proof: `Staking::RemainderMiningReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `r` is `[0, 10000]`.
	fn increase_mining_reward(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `522`
		//  Estimated: `2007`
		// Minimum execution time: 293_840_000 picoseconds.
		Weight::from_parts(295_326_600, 2007)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::UnappliedSlashes` (r:1 w:1)
	/// Proof: `Staking::UnappliedSlashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[1, 1000]`.
	fn cancel_deferred_slash(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66525`
		//  Estimated: `69990`
		// Minimum execution time: 384_743_000 picoseconds.
		Weight::from_parts(877_613_063, 69990)
			// Standard Error: 680_121
			.saturating_add(Weight::from_parts(3_860_200, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Staking::EraElectionStatus` (r:1 w:0)
	/// Proof: `Staking::EraElectionStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 32]`.
	fn rebond(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `967 + l * (2 ±0)`
		//  Estimated: `4764 + l * (2 ±0)`
		// Minimum execution time: 616_594_000 picoseconds.
		Weight::from_parts(622_823_995, 4764)
			// Standard Error: 679_783
			.saturating_add(Weight::from_parts(394_876, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::HistoryDepth` (r:1 w:1)
	/// Proof: `Staking::HistoryDepth` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasStakers` (r:101 w:101)
	/// Proof: `Staking::ErasStakers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasValidatorPrefs` (r:100 w:100)
	/// Proof: `Staking::ErasValidatorPrefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasRewardPoints` (r:0 w:100)
	/// Proof: `Staking::ErasRewardPoints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasTotalStake` (r:0 w:100)
	/// Proof: `Staking::ErasTotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasStartSessionIndex` (r:0 w:100)
	/// Proof: `Staking::ErasStartSessionIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasValidators` (r:0 w:100)
	/// Proof: `Staking::ErasValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `e` is `[1, 100]`.
	fn set_history_depth(e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `735 + e * (120 ±0)`
		//  Estimated: `4200 + e * (2595 ±0)`
		// Minimum execution time: 520_151_000 picoseconds.
		Weight::from_parts(520_151_000, 4200)
			// Standard Error: 7_810_016
			.saturating_add(Weight::from_parts(274_706_464, 0).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(e.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((6_u64).saturating_mul(e.into())))
			.saturating_add(Weight::from_parts(0, 2595).saturating_mul(e.into()))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SlashingSpans` (r:1 w:1)
	/// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:0 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:0 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::SpanSlash` (r:0 w:100)
	/// Proof: `Staking::SpanSlash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[1, 100]`.
	fn reap_stash(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `955 + s * (4 ±0)`
		//  Estimated: `4764 + s * (4 ±0)`
		// Minimum execution time: 1_025_354_000 picoseconds.
		Weight::from_parts(1_037_011_190, 4764)
			// Standard Error: 587_748
			.saturating_add(Weight::from_parts(25_162_613, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(s.into()))
	}
	/// Storage: `Staking::CurrentEra` (r:1 w:1)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::HistoryDepth` (r:1 w:0)
	/// Proof: `Staking::HistoryDepth` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:11 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ValidatorWhiteList` (r:1 w:0)
	/// Proof: `Staking::ValidatorWhiteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CandidateValidators` (r:10 w:10)
	/// Proof: `Staking::CandidateValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::MinimumValidatorCount` (r:1 w:0)
	/// Proof: `Staking::MinimumValidatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ValidatorCount` (r:1 w:0)
	/// Proof: `Staking::ValidatorCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Bonded` (r:10 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:10 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasStakers` (r:0 w:10)
	/// Proof: `Staking::ErasStakers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasTotalStake` (r:0 w:1)
	/// Proof: `Staking::ErasTotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasStartSessionIndex` (r:0 w:1)
	/// Proof: `Staking::ErasStartSessionIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::ErasValidators` (r:0 w:1)
	/// Proof: `Staking::ErasValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `d` is `[1, 1000]`.
	fn new_era(v: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `820 + d * (32 ±0) + v * (302 ±0)`
		//  Estimated: `3890 + d * (32 ±0) + v * (2786 ±15)`
		// Minimum execution time: 1_835_808_000 picoseconds.
		Weight::from_parts(98_950_880, 3890)
			// Standard Error: 18_766_948
			.saturating_add(Weight::from_parts(432_195_105, 0).saturating_mul(v.into()))
			// Standard Error: 173_248
			.saturating_add(Weight::from_parts(1_316_395, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 2786).saturating_mul(v.into()))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::NpowMintDayLimit` (r:1 w:0)
	/// Proof: `Staking::NpowMintDayLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::RemainderMiningReward` (r:1 w:1)
	/// Proof: `Staking::RemainderMiningReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::NpowDayMintedDPR` (r:1 w:1)
	/// Proof: `Staking::NpowDayMintedDPR` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn npow_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `806`
		//  Estimated: `3593`
		// Minimum execution time: 915_685_000 picoseconds.
		Weight::from_parts(915_685_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
